var search_data = {"index":{"searchIndex":["address","addresssource","emailaddress","emailaddresssource","listrandomizer","name","namesource","person","personsource","phonenumber","phonenumbersource","domain_has_mx_record?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","parse_full_name()","random_domain()","random_username()","record()","record()","record()","record()","record()","record()","record_from_name()","records()","records()","records()","records()","records()","records()","records_as_xml()","records_as_xml()","records_as_xml()","reset_unused_records()","title()","to_hash()","to_hash()","to_hash()","to_html()","to_html()","to_html()","to_s()","to_s()","to_s()","to_xml()","to_xml()","to_xml()","givennamelist","postaltownlist","streetnamelist","surnamelist","townlist"],"longSearchIndex":["address","addresssource","emailaddress","emailaddresssource","listrandomizer","name","namesource","person","personsource","phonenumber","phonenumbersource","emailaddresssource::domain_has_mx_record?()","address::new()","addresssource::new()","emailaddress::new()","emailaddresssource::new()","listrandomizer::new()","name::new()","namesource::new()","person::new()","personsource::new()","phonenumber::new()","phonenumbersource::new()","name::parse_full_name()","emailaddresssource#random_domain()","emailaddresssource#random_username()","addresssource#record()","emailaddresssource#record()","listrandomizer#record()","namesource#record()","personsource#record()","phonenumbersource#record()","emailaddresssource#record_from_name()","addresssource#records()","emailaddresssource#records()","listrandomizer#records()","namesource#records()","personsource#records()","phonenumbersource#records()","addresssource#records_as_xml()","emailaddresssource#records_as_xml()","personsource#records_as_xml()","listrandomizer#reset_unused_records()","name#title()","address#to_hash()","emailaddress#to_hash()","person#to_hash()","address#to_html()","emailaddress#to_html()","person#to_html()","address#to_s()","name#to_s()","person#to_s()","address#to_xml()","emailaddress#to_xml()","person#to_xml()","","","","",""],"info":[["Address","","Address.html","","<p>Class for postal addresses, consisting of a street name (with the house\nnumber appended to it) and the …\n"],["AddressSource","","AddressSource.html","","<p>Class to generate random addresses in the form of instances of the Address\nclass.\n"],["EmailAddress","","EmailAddress.html","","<p>Class repesenting an email address with a username and a domain attribute.\n"],["EmailAddressSource","","EmailAddressSource.html","","<p>Class to generate random email addresses for a person.\n"],["ListRandomizer","","ListRandomizer.html","","<p>Class to maintain lists of entries and to extract data randomly. Entries\nwill be selected only once. …\n"],["Name","","Name.html","","<p>Class to represent a person&#39;s name including academic titles.\n"],["NameSource","","NameSource.html","","<p>Class to generate random names.\n"],["Person","","Person.html","","<p>Instances of this class represent people with data like name or address.\n"],["PersonSource","","PersonSource.html","","<p>Class to generate random people.\n"],["PhoneNumber","","PhoneNumber.html","","<p>Class representing an international phone number including country code,\narea code, and subscriber number. …\n"],["PhoneNumberSource","","PhoneNumberSource.html","","<p>Class to generate random phone numbers. Currently this is completelly\nrandom, i.e. it is not possible …\n"],["domain_has_mx_record?","EmailAddressSource","EmailAddressSource.html#method-c-domain_has_mx_record-3F","( domain )","<p>Check if, by co-incidence, a (random) domain is a real email domain, i.e.\nhas an MX record.\n"],["new","Address","Address.html#method-c-new","( house_number, street, postal_code, town )",""],["new","AddressSource","AddressSource.html#method-c-new","( street_name_path = File.join(File.dirname(__FILE__), 'streetnamelist.txt'), postal_town_path = File.join(File.dirname(__FILE__), 'postaltownlist.txt') )","<p>Constructor. Provide paths to the street and town lists as arguments. The\nstreet list contains one street …\n"],["new","EmailAddress","EmailAddress.html#method-c-new","( username, domain = nil )","<p>Constructor: Provide a username and a domain name as arguments.\nAlternatively an String representing …\n"],["new","EmailAddressSource","EmailAddressSource.html#method-c-new","( real_domains = false, skip_mx_test = false )","<p>Constructor. Setup a new email address generator. The argument tells if\ngenerated email addresses should …\n"],["new","ListRandomizer","ListRandomizer.html#method-c-new","( data_source, record_delimiter = DefaultRecordSeparator )","<p>Constructor. Initializes the data set from the data source provided as the\nfirst argument. This argument …\n"],["new","Name","Name.html#method-c-new","( first, last, titles = [] )","<p>Constructor. Provide the given name (String), the surname (String), and\noptionally the prepending titles …\n"],["new","NameSource","NameSource.html#method-c-new","( givenname_path = File.join( File.dirname(__FILE__), 'givennamelist.txt' ), surname_path = File.join( File.dirname(__FILE__), 'surnamelist.txt' ), title_likelihood = 5, two_given_names_likelihood = 5, two_surnames_likelihood = 5 )","<p>Constructor.\n<p>Provide the path to a textfile with given names (givenname_path), one per\nline, that can …\n"],["new","Person","Person.html#method-c-new","( name, address, phone, email )","<p>Constructor.  The name parameter could be a Name or a String instance. If\nit is a String the Name constructor …\n"],["new","PersonSource","PersonSource.html#method-c-new","( givenname_path = File.join(File.dirname(__FILE__), 'givennamelist.txt'), surname_path = File.join(File.dirname(__FILE__), 'surnamelist.txt'), street_name_path = File.join(File.dirname(__FILE__), 'streetnamelist.txt'), postal_town_path = File.join(File.dirname(__FILE__), 'postaltownlist.txt') )","<p>Constructor. The arguments are paths to text files that should contain one\nrecord per line with given …\n"],["new","PhoneNumber","PhoneNumber.html#method-c-new","( country, area, subscriber )","<p>Constructor. Provide a country code (use the plus sign notation like in\n&#39;+49&#39; for Germany), an …\n"],["new","PhoneNumberSource","PhoneNumberSource.html#method-c-new","()","<p>Constructor. No input data is required for this because the number will be\n100% random.\n"],["parse_full_name","Name","Name.html#method-c-parse_full_name","( full_name )","<p>Class method for parsing a full name, consisting of optional  titles, a\ngivenname and a surname, all …\n"],["random_domain","EmailAddressSource","EmailAddressSource.html#method-i-random_domain","( )","<p>Generates a random domain. Depending on the value of this instances\n@use_real_domain property this is …\n"],["random_username","EmailAddressSource","EmailAddressSource.html#method-i-random_username","( givenname_full, surname )","<p>Generate a random username from the givenname and surname (provided as\narguments). Instead of names this …\n"],["record","AddressSource","AddressSource.html#method-i-record","()","<p>Generate and return a random Address instance.\n"],["record","EmailAddressSource","EmailAddressSource.html#method-i-record","()","<p>Returns and email address as an EmailAddress instance. The name (Name\ninstance) on which the email addres …\n"],["record","ListRandomizer","ListRandomizer.html#method-i-record","()","<p>Select randomly a record and return it as a String. This record is taken\nout of the available data set …\n"],["record","NameSource","NameSource.html#method-i-record","( arg_n_givennames = ( (rand(100) < @two_given_names_likelihood) ? 2 : 1 ), arg_n_surnames = ( (rand(100) < @two_surnames_likelihood) ? 2 : 1 ) )","<p>Return a random full name wraped in a Name instance.\n<p>The full name is made up by one or more given names …\n"],["record","PersonSource","PersonSource.html#method-i-record","()","<p>Returns one record, i.e. one Person instance with random data. Random\ndecisions like number of given …\n"],["record","PhoneNumberSource","PhoneNumberSource.html#method-i-record","()","<p>Return a phone number wrapped in an object of class PhoneNumber.\n"],["record_from_name","EmailAddressSource","EmailAddressSource.html#method-i-record_from_name","( name, surname = nil )","<p>Returns an email address as an EmailAddress instance, from which the\nusername part is composed by (parts …\n"],["records","AddressSource","AddressSource.html#method-i-records","( quantity = 1 )","<p>Generate random Address instances and return them in an Array of Address\nobjects.\n"],["records","EmailAddressSource","EmailAddressSource.html#method-i-records","( quantity = 1 )","<p>Return an Array of random email addresses (EmailAddress objects).\n"],["records","ListRandomizer","ListRandomizer.html#method-i-records","( quantity = 1 )","<p>Select randomly one or more records (list entries) and return them as an\nArray of Strings. The number …\n"],["records","NameSource","NameSource.html#method-i-records","( quantity = 1 )","<p>Return an Array of random Name objects. The parameter determines how many\nfull names are to be generated. …\n"],["records","PersonSource","PersonSource.html#method-i-records","( quantity = 1 )","<p>Return an Array of Person instances with random data.\n"],["records","PhoneNumberSource","PhoneNumberSource.html#method-i-records","( quantity = 1 )","<p>Return an Array of random PhoneNumber objects.\n"],["records_as_xml","AddressSource","AddressSource.html#method-i-records_as_xml","( quantity = 1 )","<p>Generate randome Address instances and return the list in XML format. The\nroot element of this result …\n"],["records_as_xml","EmailAddressSource","EmailAddressSource.html#method-i-records_as_xml","( quantity = 1 )","<p>Return XML data containing one root element &#39;emailing&#39; and children\nas &#39;address&#39; elements. …\n"],["records_as_xml","PersonSource","PersonSource.html#method-i-records_as_xml","( quantity = 1 )","<p>Return XML data containing one root element &#39;people&#39; and several\nchildren as &#39;person&#39; …\n"],["reset_unused_records","ListRandomizer","ListRandomizer.html#method-i-reset_unused_records","()","<p>Reset the @unused_records attribute to the initial value (in @all_records).\nThis is automatically called …\n"],["title","Name","Name.html#method-i-title","()",""],["to_hash","Address","Address.html#method-i-to_hash","()","<p>Return the data for this address as a Hash with sub Hash elements.\n"],["to_hash","EmailAddress","EmailAddress.html#method-i-to_hash","()","<p>Return this email addres as a Hash.\n"],["to_hash","Person","Person.html#method-i-to_hash","()","<p>Return the data for this person as a Hash with sub Hash elements. For\nexample the value for the key &#39;name&#39; …\n"],["to_html","Address","Address.html#method-i-to_html","()","<p>Return this address in HTML format. This inserts and HTML BR tag between\nstreet and town.\n"],["to_html","EmailAddress","EmailAddress.html#method-i-to_html","( )","<p>Return email address as an HTML Anchor element (mailto link).\n"],["to_html","Person","Person.html#method-i-to_html","( person_css_class = '', name_css_class = '' )","<p>Return the data for this Person in HTML, formatted as one paragraph (P)\nwith several lines (using the …\n"],["to_s","Address","Address.html#method-i-to_s","()",""],["to_s","Name","Name.html#method-i-to_s","()",""],["to_s","Person","Person.html#method-i-to_s","()","<p>Return the complete data set for this person as a String. Should look like\nwhat you expect in a letter …\n"],["to_xml","Address","Address.html#method-i-to_xml","()","<p>Return this address in XML format. The XML uses no attributes and the\nstructure corresponds to the Hash …\n"],["to_xml","EmailAddress","EmailAddress.html#method-i-to_xml","()","<p>Return the data for this person in XML format. The XML uses no attributes\nand the structure corresponds …\n"],["to_xml","Person","Person.html#method-i-to_xml","()","<p>Return the data for this person in XML format. The XML uses no attributes\nand the structure corresponds …\n"],["givennamelist","","givennamelist_txt.html","","<p>Aaliyah Aaron Abdul Achim Achmed Achmet Adam Adelheid Adolf Adolph Adrian\nAgnes Agnieszka Ahmad Ahmed …\n"],["postaltownlist","","postaltownlist_txt.html","","<p>01067 Dresden 01069 Dresden 01326 Dresden 01328 Dresden 01445 Radebeul\n01587 Riesa 01589 Riesa 01591 …\n"],["streetnamelist","","streetnamelist_txt.html","","<p>Aachener Allee Aachener Gasse Aachener Platz Aachener Str. Aachener Straße\nAachener Tal Aachener Weg …\n"],["surnamelist","","surnamelist_txt.html","","<p>Achsen Ackerman Adam Adams Adelsbach Affler Alsheimer Altringer Andres\nAnnen Arbegans Arens Arenz Arnoldi …\n"],["townlist","","townlist_txt.html","","<p>Adamshoffnung Admannshagen-Bargeshagen Ahlbeck Ahlbeck Ahrenshagen-Daskow\nAhrenshoop Alt Bukow Alt Krenzlin …\n"]]}}